{"ast":null,"code":"var _jsxFileName = \"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyRegister.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport CompanyDetail from '../../components/companyDetail';\n\n/**\n * 検索画面から企業の詳細確認できる画面\n * @param param0 企業id\n * @returns\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompanyRegister(_ref) {\n  _s();\n  let {\n    searchedCompany,\n    user,\n    companyList,\n    companyInfoList,\n    updateUser,\n    updateCompanyList,\n    updateCompanyInfoList\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  //idに合致するid\n  const [company, setCompany] = useState();\n  /**\n   *idに合致する企業情報を取得する\n   */\n  useEffect(() => {\n    const foundCompany = searchedCompany.find(item => item.id === id);\n    if (foundCompany) {\n      setCompany(foundCompany);\n      if (typeof company !== 'undefined') {\n        document.title = `${company.name}`;\n      }\n    }\n  });\n  /**\n   *バックエンドに企業メモを登録する\n   */\n  const handleRegisterCompanyInfo = async () => {\n    try {\n      await fetch(`http://localhost:5000/companyInfo/registerCompanyInfo`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: user.email,\n          id: id,\n          memo: ''\n        })\n      });\n      if (company) {\n        alert(`${company.name}を登録しました`);\n      }\n    } catch (err) {\n      alert('登録に失敗しました');\n    }\n  };\n\n  /**\n   * 企業リストにidの企業を加える\n   */\n  const handleAdd = () => {\n    if (id) {\n      const CompanyInfo = {\n        email: user.email,\n        id: id,\n        memo: ''\n      };\n      const updatedCompanyInfoList = companyInfoList;\n      updatedCompanyInfoList.push(CompanyInfo);\n      updateCompanyInfoList(updatedCompanyInfoList);\n      const findCompany = companyList.find(item => item.id === id);\n      if (!findCompany && company) {\n        const updatedCompanyList = companyList;\n        updatedCompanyList.push(company);\n        updateCompanyList(updatedCompanyList);\n      }\n    }\n    handleRegisterCompanyInfo();\n    navigate('/pages/company/searchCompany');\n  };\n\n  /**\n   * キャンセルボタンを押すと検索画面に戻る\n   */\n  const handleReturn = () => {\n    navigate('/pages/company/searchCompany');\n  };\n  if (typeof company !== 'undefined') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CompanyDetail, {\n        company: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAdd(),\n        children: \"\\u767B\\u9332\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleReturn(),\n        children: \"\\u623B\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }, this);\n  }\n}\n_s(CompanyRegister, \"HdyNK+0ufGtU2emPGW5kdv8lLlY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CompanyRegister;\nexport default CompanyRegister;\nvar _c;\n$RefreshReg$(_c, \"CompanyRegister\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","CompanyDetail","jsxDEV","_jsxDEV","CompanyRegister","_ref","_s","searchedCompany","user","companyList","companyInfoList","updateUser","updateCompanyList","updateCompanyInfoList","id","navigate","company","setCompany","foundCompany","find","item","document","title","name","handleRegisterCompanyInfo","fetch","method","headers","Accept","body","JSON","stringify","email","memo","alert","err","handleAdd","CompanyInfo","updatedCompanyInfoList","push","findCompany","updatedCompanyList","handleReturn","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyRegister.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n\tCompanyRegisterProps,\n\tCompanyInfoType,\n\tCompanyType,\n} from '../../utils/types';\nimport CompanyDetail from '../../components/companyDetail';\n\n/**\n * 検索画面から企業の詳細確認できる画面\n * @param param0 企業id\n * @returns\n */\nfunction CompanyRegister({\n\tsearchedCompany,\n\tuser,\n\tcompanyList,\n\tcompanyInfoList,\n\tupdateUser,\n\tupdateCompanyList,\n\tupdateCompanyInfoList,\n}: CompanyRegisterProps) {\n\tconst { id } = useParams<{ id: string }>();\n\tconst navigate = useNavigate();\n\t//idに合致するid\n\tconst [company, setCompany] = useState<CompanyType>();\n\t/**\n\t *idに合致する企業情報を取得する\n\t */\n\tuseEffect(() => {\n\t\tconst foundCompany = searchedCompany.find((item) => item.id === id);\n\n\t\tif (foundCompany) {\n\t\t\tsetCompany(foundCompany);\n\t\t\tif (typeof company !== 'undefined') {\n\t\t\t\tdocument.title = `${company.name}`;\n\t\t\t}\n\t\t}\n\t});\n\t/**\n\t *バックエンドに企業メモを登録する\n\t */\n\tconst handleRegisterCompanyInfo = async () => {\n\t\ttry {\n\t\t\tawait fetch(`http://localhost:5000/companyInfo/registerCompanyInfo`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\temail: user.email,\n\t\t\t\t\tid: id,\n\t\t\t\t\tmemo: '',\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tif (company) {\n\t\t\t\talert(`${company.name}を登録しました`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\talert('登録に失敗しました');\n\t\t}\n\t};\n\n\t/**\n\t * 企業リストにidの企業を加える\n\t */\n\tconst handleAdd = () => {\n\t\tif (id) {\n\t\t\tconst CompanyInfo: CompanyInfoType = {\n\t\t\t\temail: user.email,\n\t\t\t\tid: id,\n\t\t\t\tmemo: '',\n\t\t\t};\n\t\t\tconst updatedCompanyInfoList: CompanyInfoType[] = companyInfoList;\n\t\t\tupdatedCompanyInfoList.push(CompanyInfo);\n\t\t\tupdateCompanyInfoList(updatedCompanyInfoList);\n\t\t\tconst findCompany: CompanyType | undefined = companyList.find(\n\t\t\t\t(item) => item.id === id\n\t\t\t);\n\t\t\tif (!findCompany && company) {\n\t\t\t\tconst updatedCompanyList: CompanyType[] = companyList;\n\t\t\t\tupdatedCompanyList.push(company);\n\t\t\t\tupdateCompanyList(updatedCompanyList);\n\t\t\t}\n\t\t}\n\n\t\thandleRegisterCompanyInfo();\n\n\t\tnavigate('/pages/company/searchCompany');\n\t};\n\n\t/**\n\t * キャンセルボタンを押すと検索画面に戻る\n\t */\n\tconst handleReturn = () => {\n\t\tnavigate('/pages/company/searchCompany');\n\t};\n\n\tif (typeof company !== 'undefined') {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<CompanyDetail company />\n\t\t\t\t<button onClick={() => handleAdd()}>登録</button>\n\t\t\t\t<button onClick={() => handleReturn()}>戻る</button>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <div></div>;\n\t}\n}\n\nexport default CompanyRegister;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}