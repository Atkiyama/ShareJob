[{"/Users/akiyamashuuhei/data/ShereJob/frontend/src/index.tsx":"1","/Users/akiyamashuuhei/data/ShereJob/frontend/src/App.tsx":"2","/Users/akiyamashuuhei/data/ShereJob/frontend/src/components/header.tsx":"3","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/top.tsx":"4","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/home.tsx":"5","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/login.tsx":"6","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/logout.tsx":"7","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/register.tsx":"8","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/editUser.tsx":"9","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/searchCompany.tsx":"10","/Users/akiyamashuuhei/data/ShereJob/frontend/src/utils/types.ts":"11","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyList.tsx":"12","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyEdit.tsx":"13","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyRegister.tsx":"14","/Users/akiyamashuuhei/data/ShereJob/frontend/src/components/companyDetail.tsx":"15","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/myCompany/editMemo.tsx":"16","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyAdd.tsx":"17","/Users/akiyamashuuhei/data/ShereJob/frontend/src/utils/useToken.ts":"18"},{"size":223,"mtime":1683867393371,"results":"19","hashOfConfig":"20"},{"size":7707,"mtime":1687682507225,"results":"21","hashOfConfig":"20"},{"size":1252,"mtime":1687682507225,"results":"22","hashOfConfig":"20"},{"size":1402,"mtime":1687682521601,"results":"23","hashOfConfig":"20"},{"size":3389,"mtime":1687682507246,"results":"24","hashOfConfig":"20"},{"size":1890,"mtime":1687516885248,"results":"25","hashOfConfig":"20"},{"size":1258,"mtime":1687516885248,"results":"26","hashOfConfig":"20"},{"size":1838,"mtime":1687516885250,"results":"27","hashOfConfig":"20"},{"size":3809,"mtime":1687682507247,"results":"28","hashOfConfig":"20"},{"size":3220,"mtime":1687516885247,"results":"29","hashOfConfig":"20"},{"size":2164,"mtime":1685604954491,"results":"30","hashOfConfig":"20"},{"size":3098,"mtime":1687682507245,"results":"31","hashOfConfig":"20"},{"size":4456,"mtime":1687516885246,"results":"32","hashOfConfig":"20"},{"size":4517,"mtime":1687516885247,"results":"33","hashOfConfig":"20"},{"size":574,"mtime":1687519777272,"results":"34","hashOfConfig":"20"},{"size":3418,"mtime":1687516885248,"results":"35","hashOfConfig":"20"},{"size":1675,"mtime":1687516885246,"results":"36","hashOfConfig":"20"},{"size":1158,"mtime":1687516885250,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"u4a8vf",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},"/Users/akiyamashuuhei/data/ShereJob/frontend/src/index.tsx",[],[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/App.tsx",["99","100","101"],[],"import React, { useState, useEffect } from 'react';\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nimport Header from './components/header';\nimport Home from './pages/home';\nimport Top from './pages/top';\nimport Login from './pages/user/login';\nimport Logout from './pages/user/logout';\nimport Register from './pages/user/register';\nimport EditMemo from './pages/myCompany/editMemo';\nimport EditUser from './pages/user/editUser';\nimport SearchCompany from './pages/company/searchCompany';\nimport CompanyRegister from './pages/company/companyRegister';\nimport CompanyList from './pages/company/companyList';\nimport CompanyEdit from './pages/company/companyEdit';\n\nimport { MyCompanyType, CompanyType } from './utils/types';\nimport CompanyAdd from './pages/company/companyAdd';\nimport useToken from './utils/useToken';\n\nfunction App() {\n\t/**\n\t * ログイン管理のフラグ\n\t */\n\tconst [loginFlag, setLoginFlag] = useState<boolean>(false);\n\n\tconst [myCompanyList, setMyCompanyList] = useState<MyCompanyType[]>([]);\n\t/**\n\t * メモを登録している企業のリスト\n\t */\n\tconst [companyList, setCompanyList] = useState<CompanyType[]>([]);\n\t/**\n\t * 自分で登録した企業のリスト\n\t */\n\tconst [registerCompanyList, setRegisterCompanyList] = useState<CompanyType[]>(\n\t\t[]\n\t);\n\t/**\n\t * 検索した企業のリスト\n\t */\n\tconst [searchedCompany, setSearchedCompany] = useState<CompanyType[]>([]);\n\n\t/**\n\t * 以下、下位のコンポーネントで各変数を更新するための関数\n\t * @param updatedUser\n\t */\n\tconst updateLoginFlag = (updatedLoginFlag: boolean) => {\n\t\tsetLoginFlag(updatedLoginFlag);\n\t};\n\n\tconst updateMyCompanyList = (updatedMyCompanyList: MyCompanyType[]) => {\n\t\tsetMyCompanyList(updatedMyCompanyList);\n\t};\n\n\tconst updateCompanyList = (updatedCompanyList: CompanyType[]) => {\n\t\tsetCompanyList(updatedCompanyList);\n\t};\n\n\tconst updateRegisterCompanyList = (\n\t\tupdatedRegisterCompanyList: CompanyType[]\n\t) => {\n\t\tsetRegisterCompanyList(updatedRegisterCompanyList);\n\t};\n\n\tconst updateSearchCompanyList = (\n\t\tupdatedSearchedCompanyList: CompanyType[]\n\t) => {\n\t\tsetSearchedCompany(updatedSearchedCompanyList);\n\t};\n\n\t/**\n\t * ログイン情報\n\t */\n\tconst user = useToken(loginFlag, updateLoginFlag);\n\n\t/**\n\t *企業メモのリストを取得する\n\t */\n\tconst handleMyCompanyList = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\tprocess.env.REACT_APP_BASE_URL! +\n\t\t\t\t\t`myCompany/getMyCompanyList?email=${user.email}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tconst jsonMyCompanyList = jsonResponse.myCompanyList;\n\t\t\tupdateMyCompanyList(jsonMyCompanyList);\n\t\t} catch (err) {\n\t\t\talert('企業情報の取得に失敗しました\\n' + err);\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\t/**\n\t *メモを登録している企業のリストを取得する\n\t */\n\tconst handleCompanyList = async () => {\n\t\ttry {\n\t\t\tconst ids: string[] = myCompanyList.map((info) => info.id);\n\t\t\tconst joinedString = ids.join(',');\n\t\t\tconst encodedIds = encodeURIComponent(joinedString);\n\t\t\tconst req =\n\t\t\t\tprocess.env.REACT_APP_BASE_URL! +\n\t\t\t\t`company/getCompanyList?ids=${encodedIds}`;\n\n\t\t\tconst response = await fetch(req, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tconst jsonCompanyList = jsonResponse.companyList;\n\n\t\t\tupdateCompanyList(jsonCompanyList);\n\t\t} catch (err) {\n\t\t\talert('企業情報の取得に失敗しました\\n' + err);\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst handleRegisterCompanyList = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\tprocess.env.REACT_APP_BASE_URL! +\n\t\t\t\t\t`company/getRegisterCompanyList?email=${user.email}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tconst jsonMyCompanyList = jsonResponse.myCompanyList;\n\t\t\tupdateRegisterCompanyList(jsonMyCompanyList);\n\t\t} catch (err) {\n\t\t\talert('企業情報の取得に失敗しました\\n' + err);\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst handleUpdate = async () => {\n\t\tawait handleMyCompanyList();\n\t\tawait handleCompanyList();\n\t\tawait handleRegisterCompanyList();\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.title = 'ShareJob';\n\t\tif (user.email !== '') {\n\t\t\thandleUpdate();\n\t\t}\n\t}, [user.email]);\n\n\tuseEffect(() => {\n\t\tif (user.email !== '' && myCompanyList.length > 0) {\n\t\t\thandleCompanyList();\n\t\t}\n\t}, [user.email, myCompanyList]);\n\n\t/**\n\t * 常にユーザ以外の情報を更新する\n\t */\n\tuseEffect(() => {\n\t\tif (user.email !== '') {\n\t\t\thandleUpdate();\n\t\t}\n\t}, []);\n\n\t/**\n\t * 各コンポーネントをルーティングする\n\t */\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<div className=\"container\">\n\t\t\t\t<Header user={user} />\n\n\t\t\t\t{/* <p>user:{user.email}</p>\n\t\t\t\t<p>useToken:{useToken(loginFlag, updateLoginFlag).email}</p>\n\n\t\t\t\t<p>user{user.name}</p>\n\t\t\t\t<p>useToken:{useToken(loginFlag, updateLoginFlag).name}</p>\n\t\t\t\t<p>Token:{localStorage.getItem('token')}</p> */}\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/\" element={<Top />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/home\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<Home\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tmyCompanyList={myCompanyList}\n\t\t\t\t\t\t\t\tcompanyList={companyList}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/user/login\"\n\t\t\t\t\t\telement={<Login updatedLoginFlag={updateLoginFlag} />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/user/logout\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<Logout\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tupdateCompanyList={updateCompanyList}\n\t\t\t\t\t\t\t\tupdateMyCompanyList={updateMyCompanyList}\n\t\t\t\t\t\t\t\tupdateSearchCompanyList={updateSearchCompanyList}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/user/editUser\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<EditUser\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tupdateCompanyList={updateCompanyList}\n\t\t\t\t\t\t\t\tupdateMyCompanyList={updateMyCompanyList}\n\t\t\t\t\t\t\t\thandleUpdate={handleUpdate}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route path=\"/pages/user/register\" element={<Register />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/myCompany/myCompany/:email/:id\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<EditMemo\n\t\t\t\t\t\t\t\tcompanyList={companyList}\n\t\t\t\t\t\t\t\tmyCompanyList={myCompanyList}\n\t\t\t\t\t\t\t\tupdateMyCompanyList={updateMyCompanyList}\n\t\t\t\t\t\t\t\thandleUpdate={handleUpdate}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/company/searchCompany\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<SearchCompany\n\t\t\t\t\t\t\t\tsearchedCompany={searchedCompany}\n\t\t\t\t\t\t\t\tupdateSearchCompanyList={updateSearchCompanyList}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/company/companyList\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<CompanyList\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tregisterCompanyList={registerCompanyList}\n\t\t\t\t\t\t\t\tupdateRegisterCompanyList={updateRegisterCompanyList}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/company/companyEdit/:id\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<CompanyEdit\n\t\t\t\t\t\t\t\tregisterCompanyList={registerCompanyList}\n\t\t\t\t\t\t\t\thandleUpdate={handleUpdate}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/company/companyRegister\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<CompanyRegister user={user} handleUpdate={handleUpdate} />\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/pages/company/companyAdd/:id\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<CompanyAdd\n\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\tsearchedCompanyList={searchedCompany}\n\t\t\t\t\t\t\t\thandleUpdate={handleUpdate}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Route path=\"*\" element={<h1>Page Not Found</h1>} />\n\t\t\t\t</Routes>\n\t\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","/Users/akiyamashuuhei/data/ShereJob/frontend/src/components/header.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/top.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/home.tsx",["102"],[],"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { HomeProps, MyCompanyTableType } from '../utils/types';\nimport {\n\tColumnDef,\n\tflexRender,\n\tgetCoreRowModel,\n\tuseReactTable,\n\tCellContext,\n} from '@tanstack/react-table';\n\n/**\n * ホーム画面\n * @param param0\n * @returns\n */\nfunction Home({ user, myCompanyList, companyList }: HomeProps) {\n\tconst navigate = useNavigate();\n\tconst [data, setData] = useState<MyCompanyTableType[]>([]);\n\t/**\n\t * テーブルのヘッダを定義する\n\t */\n\tconst columns: ColumnDef<MyCompanyTableType, any>[] = [\n\t\t{\n\t\t\taccessorKey: 'name',\n\t\t\theader: '企業名',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'memo',\n\t\t\theader: 'メモ',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'actions',\n\t\t\theader: '', // 空のヘッダーを指定して編集ボタンの列を作成\n\t\t\tcell: (rowContext: CellContext<MyCompanyTableType, any>) => (\n\t\t\t\t<button onClick={() => handleEdit(rowContext.row.original)}>\n\t\t\t\t\t編集\n\t\t\t\t</button>\n\t\t\t),\n\t\t},\n\t];\n\n\t/**\n\t * ReactTableを定義する\n\t */\n\tconst table = useReactTable<MyCompanyTableType>({\n\t\tdata: data,\n\t\tcolumns,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t});\n\n\t/**\n\t * companyInfoからcompanyInfoTableの情報を取得する\n\t */\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tdocument.title = 'ホーム';\n\t\t\tconst handleCompanyInfoTable = async () => {\n\t\t\t\tif (companyList.length > 0) {\n\t\t\t\t\tconst newData: MyCompanyTableType[] = [];\n\t\t\t\t\tfor (let i = 0; i < myCompanyList.length; i++) {\n\t\t\t\t\t\tfor (let j = 0; j < companyList.length; j++) {\n\t\t\t\t\t\t\tif (myCompanyList[i].id === companyList[j].id) {\n\t\t\t\t\t\t\t\tconst row = {\n\t\t\t\t\t\t\t\t\tid: myCompanyList[i].id, // idを追加\n\t\t\t\t\t\t\t\t\temail: myCompanyList[i].email, // emailを追加\n\t\t\t\t\t\t\t\t\tname: companyList[j].name,\n\t\t\t\t\t\t\t\t\tmemo: myCompanyList[i].memo,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tnewData.push(row);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsetData(newData);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\thandleCompanyInfoTable();\n\t\t} else {\n\t\t\talert('ログインしてください');\n\t\t\tnavigate('/pages/user/login');\n\t\t}\n\t}, [myCompanyList, companyList]);\n\n\t/**\n\t * 編集画面に遷移する\n\t * @param row emailとidが含まれる\n\t */\n\tconst handleEdit = (row: MyCompanyTableType) => {\n\t\t// 編集処理を実装する\n\t\tnavigate(`/pages/myCompany/myCompany/${row.email}/${row.id}`);\n\t};\n\n\t/**\n\t * 検索画面に遷移する\n\t */\n\tconst handleSearch = () => {\n\t\tnavigate('/pages/company/searchCompany');\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h3>My企業</h3>\n\n\t\t\t<table className=\"table\">\n\t\t\t\t<thead>\n\t\t\t\t\t{table.getHeaderGroups().map((headerGroup, index) => (\n\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t{headerGroup.headers.map((header, index) => (\n\t\t\t\t\t\t\t\t<th key={index}>\n\t\t\t\t\t\t\t\t\t{header.isPlaceholder\n\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t: flexRender(\n\t\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\n\t\t\t\t\t\t\t\t\t\t\t\theader.getContext()\n\t\t\t\t\t\t\t\t\t\t  )}\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{table.getRowModel().rows.map((row, index) => (\n\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t{row.getVisibleCells().map((cell, index) => (\n\t\t\t\t\t\t\t\t<td key={index}>\n\t\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<div className=\"position-fixed\">\n\t\t\t\t企業の検索、追加 →{' '}\n\t\t\t\t<button className=\"large-button\" onClick={handleSearch}>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Home;\n","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/login.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/logout.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/register.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/user/editUser.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/searchCompany.tsx",["103"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CompanyTableType, SearchCompanyProps } from '../../utils/types';\n\nimport {\n\tColumnDef,\n\tflexRender,\n\tgetCoreRowModel,\n\tuseReactTable,\n\tCellContext,\n} from '@tanstack/react-table';\n\n/**\n * 企業情報を検索する\n * @param param0\n * @returns\n */\nfunction SearchCompany({\n\tsearchedCompany,\n\tupdateSearchCompanyList,\n}: SearchCompanyProps) {\n\tconst navigate = useNavigate();\n\t//検索ワード\n\tconst [word, setWord] = useState<string>('');\n\t//const [searchedCompany, setSearchedCompany] = useState<CompanyType[]>([]);\n\n\t//検索ワードのセッター\n\tconst updateWord = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetWord(event.target.value);\n\t};\n\tuseEffect(() => {\n\t\tdocument.title = `企業検索`;\n\t});\n\n\tuseEffect(() => {\n\t\tupdateSearchCompanyList([]);\n\t}, [word]);\n\n\t/**\n\t * 企業の詳細画面を開く\n\t * @param row idに企業のidが開く\n\t */\n\tconst handleOpenDetail = (row: CompanyTableType) => {\n\t\tnavigate(`/pages/company/companyAdd/${row.id}`);\n\t};\n\n\t/**\n\t * 表のヘッダーを定義\n\t */\n\tconst columns: ColumnDef<CompanyTableType, any>[] = [\n\t\t{\n\t\t\taccessorKey: 'name',\n\t\t\theader: '',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'abstract',\n\t\t\theader: '',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'actions',\n\t\t\theader: '', // 空のヘッダーを指定して編集ボタンの列を作成\n\t\t\tcell: (rowContext: CellContext<CompanyTableType, any>) => (\n\t\t\t\t<button onClick={() => handleOpenDetail(rowContext.row.original)}>\n\t\t\t\t\t詳細\n\t\t\t\t</button>\n\t\t\t),\n\t\t},\n\t\t// 他のカラムを追加する場合はここに定義します\n\t];\n\n\tconst data = searchedCompany; // 検索結果のデータを使用します\n\n\t/**\n\t * バックエンドに検索ワードを送信、結果を取得する\n\t */\n\tconst handleSearch = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\tprocess.env.REACT_APP_BASE_URL! +\n\t\t\t\t\t`company/searchCompany/?words=${word}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tupdateSearchCompanyList(jsonResponse.companyList);\n\t\t} catch (err) {\n\t\t\talert('検索に失敗しました');\n\t\t}\n\t};\n\n\t/**\n\t * ReactTableを定義\n\t */\n\tconst table = useReactTable<CompanyTableType>({\n\t\tdata: data,\n\t\tcolumns,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>企業検索</h1>\n\t\t\t<div>\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"search-company__textarea\"\n\t\t\t\t\tvalue={word}\n\t\t\t\t\tonChange={updateWord}\n\t\t\t\t\tplaceholder=\"キーワードを入力してください\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<button className=\"search-company__button\" onClick={handleSearch}>\n\t\t\t\t検索\n\t\t\t</button>\n\t\t\t<div>\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<thead></thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{table.getRowModel().rows.map((row, index) => (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell, index) => (\n\t\t\t\t\t\t\t\t\t<td key={index}>\n\t\t\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default SearchCompany;\n","/Users/akiyamashuuhei/data/ShereJob/frontend/src/utils/types.ts",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyList.tsx",["104"],[],"import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CompanyListProps, CompanyTableType } from '../../utils/types';\nimport {\n\tColumnDef,\n\tflexRender,\n\tgetCoreRowModel,\n\tuseReactTable,\n\tCellContext,\n} from '@tanstack/react-table';\n\n/**\n * 自分で登録した企業リストを表示する\n * @param param0\n * @returns\n */\nfunction CompanyList({\n\tuser,\n\tregisterCompanyList,\n\tupdateRegisterCompanyList,\n}: CompanyListProps) {\n\tconst navigate = useNavigate();\n\t/**\n\t * 表のヘッダを定義\n\t */\n\tconst columns: ColumnDef<CompanyTableType, any>[] = [\n\t\t{\n\t\t\taccessorKey: 'name',\n\t\t\theader: '',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'abstract',\n\t\t\theader: '',\n\t\t},\n\t\t{\n\t\t\taccessorKey: 'actions',\n\t\t\theader: '', // 空のヘッダーを指定して編集ボタンの列を作成\n\t\t\tcell: (rowContext: CellContext<CompanyTableType, any>) => (\n\t\t\t\t<button onClick={() => handleOpenEdit(rowContext.row.original)}>\n\t\t\t\t\t詳細\n\t\t\t\t</button>\n\t\t\t),\n\t\t},\n\t\t// 他のカラムを追加する場合はここに定義します\n\t];\n\n\t/**\n\t * 企業編集画面を開く\n\t * @param row idを格納する\n\t */\n\tconst handleOpenEdit = (row: CompanyTableType) => {\n\t\tnavigate(`/pages/company/companyEdit/${row.id}`);\n\t};\n\n\tconst data = registerCompanyList;\n\t/**\n\t * reactテーブルを定義\n\t */\n\tconst table = useReactTable<CompanyTableType>({\n\t\tdata: data,\n\t\tcolumns,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t});\n\n\t/**\n\t * 自分が登録した企業をバックエンドから取得する\n\t */\n\tconst handleMyCompanyList = async () => {\n\t\tconst response = await fetch(\n\t\t\tprocess.env.REACT_APP_BASE_URL! +\n\t\t\t\t`company/getRegisterCompanyList?email=${user.email}`,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t\tconst jsonResponse = await response.json();\n\t\tupdateRegisterCompanyList(jsonResponse.companyList);\n\t};\n\tconst handleAdd = async () => {\n\t\tnavigate(`/pages/company/companyRegister/`);\n\t};\n\n\t/**\n\t *ログイン状態によって処理を分岐する\n\t */\n\tuseEffect(() => {\n\t\tdocument.title = `登録企業一覧`;\n\t\tif (user.email !== '') {\n\t\t\thandleMyCompanyList();\n\t\t} else {\n\t\t\talert('ログインしてください');\n\t\t\tnavigate('/pages/user/login');\n\t\t}\n\t}, []);\n\tif (typeof data !== 'undefined') {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"table\">\n\t\t\t\t\t<thead></thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{table.getRowModel().rows.map((row, index) => (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell, index) => (\n\t\t\t\t\t\t\t\t\t<td key={index}>\n\t\t\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<div className=\"position-fixed\">\n\t\t\t\t\t企業の追加登録 →{' '}\n\t\t\t\t\t<button className=\"large-button\" onClick={handleAdd}>\n\t\t\t\t\t\t+\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\tconst handleError = () => {\n\t\t\thandleMyCompanyList();\n\t\t};\n\t\thandleError();\n\t\treturn <div></div>;\n\t}\n}\n\nexport default CompanyList;\n","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyEdit.tsx",["105"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { CompanyEditProps, CompanyType } from '../../utils/types';\n\n/**\n * 企業情報を編集する(制作中)\n * @param id 編集する企業のid\n * @returns\n */\nfunction CompanyEdit({ registerCompanyList, handleUpdate }: CompanyEditProps) {\n\tconst { id } = useParams<{ id: string }>();\n\tconst navigate = useNavigate();\n\tconst [company, setCompany] = useState<CompanyType | undefined>(undefined);\n\n\t/**\n\t * idに合致するcompanyをセットする\n\t */\n\tuseEffect(() => {\n\t\tconst foundCompany = registerCompanyList.find((item) => item.id === id);\n\n\t\tif (foundCompany) {\n\t\t\tsetCompany(foundCompany);\n\t\t\tdocument.title = `${foundCompany.name}`;\n\t\t}\n\t}, []);\n\n\tconst handleUpdateRegisterCompany = async () => {\n\t\tif (company) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\tprocess.env.REACT_APP_BASE_URL! + `company/updateCompany/${id}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\tauthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tid: company.id,\n\t\t\t\t\t\t\tname: company.name,\n\t\t\t\t\t\t\tauthor: company.author,\n\t\t\t\t\t\t\tabstract: company.abstract,\n\t\t\t\t\t\t\tindustries: company.industries,\n\t\t\t\t\t\t\tlocations: company.locations,\n\t\t\t\t\t\t}),\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst jsonRes = await response.json();\n\t\t\t\talert(jsonRes.message);\n\t\t\t} catch (err) {\n\t\t\t\talert('更新に失敗しました');\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleSave = () => {\n\t\thandleUpdateRegisterCompany();\n\t\thandleUpdate();\n\t\tnavigate('/pages/company/companyList');\n\t};\n\n\tconst handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst { value } = event.target;\n\t\tif (company) {\n\t\t\tconst updatedCompany: CompanyType = {\n\t\t\t\tid: company.id,\n\t\t\t\tname: value,\n\t\t\t\tauthor: company.author,\n\t\t\t\tabstract: company.abstract,\n\t\t\t\tindustries: company.industries,\n\t\t\t\tlocations: company.locations,\n\t\t\t};\n\t\t\tsetCompany(updatedCompany);\n\t\t}\n\t};\n\n\tconst handleAbstractChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst { value } = event.target;\n\t\tif (company) {\n\t\t\tconst updatedCompany: CompanyType = {\n\t\t\t\tid: company.id,\n\t\t\t\tname: company.name,\n\t\t\t\tauthor: company.author,\n\t\t\t\tabstract: value,\n\t\t\t\tindustries: company.industries,\n\t\t\t\tlocations: company.locations,\n\t\t\t};\n\t\t\tsetCompany(updatedCompany);\n\t\t}\n\t};\n\n\tconst handleIndustriesChange = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => {\n\t\tconst { value } = event.target;\n\t\tif (company) {\n\t\t\tconst updatedCompany: CompanyType = {\n\t\t\t\tid: company.id,\n\t\t\t\tname: company.name,\n\t\t\t\tauthor: company.author,\n\t\t\t\tabstract: company.abstract,\n\t\t\t\tindustries: value.split(','),\n\t\t\t\tlocations: company.locations,\n\t\t\t};\n\t\t\tsetCompany(updatedCompany);\n\t\t}\n\t};\n\n\tconst handleLocationsChange = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>\n\t) => {\n\t\tconst { value } = event.target;\n\t\tif (company) {\n\t\t\tconst updatedCompany: CompanyType = {\n\t\t\t\tid: company.id,\n\t\t\t\tname: company.name,\n\t\t\t\tauthor: company.author,\n\t\t\t\tabstract: company.abstract,\n\t\t\t\tindustries: company.industries,\n\t\t\t\tlocations: value.split(','),\n\t\t\t};\n\t\t\tsetCompany(updatedCompany);\n\t\t}\n\t};\n\n\tconst handleReturn = () => {\n\t\tnavigate('/pages/company/companyList');\n\t};\n\n\tif (company) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={company.name}\n\t\t\t\t\t\tonChange={handleNameChange}\n\t\t\t\t\t\tclassName=\"textarea\"\n\t\t\t\t\t/>\n\t\t\t\t</h1>\n\t\t\t\t<h2>概要</h2>\n\t\t\t\t<div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={company.abstract}\n\t\t\t\t\t\tonChange={handleAbstractChange}\n\t\t\t\t\t\tclassName=\"textarea-container\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<h2>業種</h2>\n\t\t\t\t<div>\n\t\t\t\t\t*複数の業種を入力する場合、半角「,」で区切って入力してください\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={company.industries.join(',')}\n\t\t\t\t\t\tonChange={handleIndustriesChange}\n\t\t\t\t\t\tclassName=\"textarea-container\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<h2>勤務地</h2>\n\t\t\t\t<div>\n\t\t\t\t\t*複数の勤務地を入力する場合、半角「,」で区切って入力してください\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={company.locations.join(',')}\n\t\t\t\t\t\tonChange={handleLocationsChange}\n\t\t\t\t\t\tclassName=\"textarea-container\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<button onClick={handleSave}>保存</button>\n\t\t\t\t<button onClick={handleReturn}>戻る</button>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <div></div>;\n\t}\n}\n\nexport default CompanyEdit;\n","/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyRegister.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/components/companyDetail.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/myCompany/editMemo.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/company/companyAdd.tsx",[],[],"/Users/akiyamashuuhei/data/ShereJob/frontend/src/utils/useToken.ts",["106"],[],"import { useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport { UserType } from './types';\n\n\nconst useToken = (loginFlag: boolean, updateLoginFlag: (updatedLoginFlag: boolean) => void): typeof loginUser => {\n    const [loginUser, setLoginUser] = useState<UserType>({\n        name: '',\n        email: '',\n    });\n    //const navigate = useNavigate();\n    const token = localStorage.getItem('token');\n    const handleToken = (loginFlag: boolean) => {\n        if (token) {\n            const decoded: { email: string, name: string } = jwtDecode(token);\n\n            const user: UserType = {\n                name: decoded.name,\n                email: decoded.email,\n            };\n            setLoginUser(user);\n            if (!loginFlag) {\n                updateLoginFlag(true);\n            }\n\n        } else {\n            const user: UserType = {\n                name: \"\",\n                email: \"\",\n            };\n            setLoginUser(user);\n            updateLoginFlag(false);\n        }\n    }\n    useEffect(() => {\n        handleToken(loginFlag);\n    }, [token, loginFlag]);\n\n\n    return loginUser;\n};\n\nexport default useToken;",{"ruleId":"107","severity":1,"message":"108","line":166,"column":5,"nodeType":"109","endLine":166,"endColumn":17,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":172,"column":5,"nodeType":"109","endLine":172,"endColumn":32,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":181,"column":5,"nodeType":"109","endLine":181,"endColumn":7,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"115","line":84,"column":5,"nodeType":"109","endLine":84,"endColumn":33,"suggestions":"116"},{"ruleId":"107","severity":1,"message":"117","line":37,"column":5,"nodeType":"109","endLine":37,"endColumn":11,"suggestions":"118"},{"ruleId":"107","severity":1,"message":"119","line":99,"column":5,"nodeType":"109","endLine":99,"endColumn":7,"suggestions":"120"},{"ruleId":"107","severity":1,"message":"121","line":25,"column":5,"nodeType":"109","endLine":25,"endColumn":7,"suggestions":"122"},{"ruleId":"107","severity":1,"message":"123","line":37,"column":8,"nodeType":"109","endLine":37,"endColumn":26,"suggestions":"124"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleUpdate'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has a missing dependency: 'handleCompanyList'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'handleUpdate' and 'user.email'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has missing dependencies: 'navigate' and 'user'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'updateSearchCompanyList'. Either include it or remove the dependency array. If 'updateSearchCompanyList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["129"],"React Hook useEffect has missing dependencies: 'handleMyCompanyList', 'navigate', and 'user.email'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has missing dependencies: 'id' and 'registerCompanyList'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'handleToken'. Either include it or remove the dependency array.",["132"],{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"133","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [handleUpdate, user.email]",{"range":"148","text":"149"},"Update the dependencies array to be: [user.email, myCompanyList, handleCompanyList]",{"range":"150","text":"151"},{"range":"152","text":"149"},"Update the dependencies array to be: [myCompanyList, companyList, user, navigate]",{"range":"153","text":"154"},"Update the dependencies array to be: [updateSearchCompanyList, word]",{"range":"155","text":"156"},"Update the dependencies array to be: [handleMyCompanyList, navigate, user.email]",{"range":"157","text":"158"},"Update the dependencies array to be: [id, registerCompanyList]",{"range":"159","text":"160"},"Update the dependencies array to be: [token, loginFlag, handleToken]",{"range":"161","text":"162"},[4307,4319],"[handleUpdate, user.email]",[4429,4456],"[user.email, myCompanyList, handleCompanyList]",[4563,4565],[1866,1894],"[myCompanyList, companyList, user, navigate]",[830,836],"[updateSearchCompanyList, word]",[2053,2055],"[handleMyCompanyList, navigate, user.email]",[709,711],"[id, registerCompanyList]",[1085,1103],"[token, loginFlag, handleToken]"]