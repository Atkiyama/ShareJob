{"ast":null,"code":"var _jsxFileName = \"/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/companyInfo/companyInfoEdit.tsx\",\n  _s = $RefreshSig$();\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompanyInfoEdit(_ref) {\n  _s();\n  let {\n    user,\n    companyList,\n    companyInfoList,\n    updateUser,\n    updateCompanyInfoList\n  } = _ref;\n  const {\n    email,\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  // 対応する会社情報を探す\n  const company = companyList.find(info => info.id === id);\n  const companyInfo = companyInfoList.find(info => info.id === id && info.email === email);\n  const [memo, setMemo] = useState((companyInfo === null || companyInfo === void 0 ? void 0 : companyInfo.memo) || '');\n  const handleMemoChange = event => {\n    setMemo(event.target.value);\n  };\n  const handleUpdate = async e => {\n    try {\n      const response = await fetch(`http://localhost:5000//companyInfo/updateCompanyInfo/${email}/${id}`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      const jsonResponse = await response.json();\n      localStorage.setItem('token', jsonResponse.token);\n      await Promise.all([updateUser({\n        name: jsonResponse.savedUserData.name,\n        email: jsonResponse.savedUserData.email,\n        companyInfoList: jsonResponse.savedUserData.companyInfoList\n      }), handleCompanyInfoList(), handleCompanyList(), alert('ログインに成功しました' + '\\n email:' + jsonResponse.savedUserData.email + '\\n password:' + jsonResponse.savedUserData.password)]);\n      navigate('/pages/home');\n    } catch (err) {\n      alert('ログインに失敗しました');\n    }\n  };\n  const handleComplete = () => {\n    // 完了ボタンが押されたときの処理を実装する\n    const updatedCompanyInfoList = companyInfoList.map(info => {\n      if (info.email === email && info.id === id) {\n        return {\n          ...info,\n          memo: memo\n        };\n      }\n      return info;\n    });\n    updateCompanyInfoList(updatedCompanyInfoList);\n    navigate('/pages/home');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [company ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [company.name, \"\\u306E\\u30E1\\u30E2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textarea-container\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textarea\",\n        rows: 5,\n        value: memo,\n        onChange: handleMemoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleComplete,\n      children: \"\\u5B8C\\u4E86\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }, this);\n}\n_s(CompanyInfoEdit, \"UgNvk3IEgSYEB+9cZzQdMCAYr+Q=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CompanyInfoEdit;\nexport default CompanyInfoEdit;\nvar _c;\n$RefreshReg$(_c, \"CompanyInfoEdit\");","map":{"version":3,"names":["useParams","useNavigate","useState","jsxDEV","_jsxDEV","CompanyInfoEdit","_ref","_s","user","companyList","companyInfoList","updateUser","updateCompanyInfoList","email","id","navigate","company","find","info","companyInfo","memo","setMemo","handleMemoChange","event","target","value","handleUpdate","e","response","fetch","method","headers","Accept","body","JSON","stringify","password","jsonResponse","json","localStorage","setItem","token","Promise","all","name","savedUserData","handleCompanyInfoList","handleCompanyList","alert","err","handleComplete","updatedCompanyInfoList","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","rows","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/akiyamashuuhei/data/ShereJob/frontend/src/pages/companyInfo/companyInfoEdit.tsx"],"sourcesContent":["import { useParams, useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n\tCompanyInfoProps,\n\tCompanyInfoType,\n\tCompanyType,\n} from '../../utils/types';\n\nfunction CompanyInfoEdit({\n\tuser,\n\tcompanyList,\n\tcompanyInfoList,\n\tupdateUser,\n\tupdateCompanyInfoList,\n}: CompanyInfoProps) {\n\tconst { email, id } = useParams();\n\tconst navigate = useNavigate();\n\t// 対応する会社情報を探す\n\tconst company: CompanyType | undefined = companyList.find(\n\t\t(info) => info.id === id\n\t);\n\n\tconst companyInfo: CompanyInfoType | undefined = companyInfoList.find(\n\t\t(info) => info.id === id && info.email === email\n\t);\n\n\tconst [memo, setMemo] = useState<string>(companyInfo?.memo || '');\n\n\tconst handleMemoChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetMemo(event.target.value);\n\t};\n\tconst handleUpdate = async (e: React.FormEvent<HTMLFormElement>) => {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`http://localhost:5000//companyInfo/updateCompanyInfo/${email}/${id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\temail: email,\n\t\t\t\t\t\tpassword: password,\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst jsonResponse = await response.json();\n\t\t\tlocalStorage.setItem('token', jsonResponse.token);\n\n\t\t\tawait Promise.all([\n\t\t\t\tupdateUser({\n\t\t\t\t\tname: jsonResponse.savedUserData.name,\n\t\t\t\t\temail: jsonResponse.savedUserData.email,\n\t\t\t\t\tcompanyInfoList: jsonResponse.savedUserData.companyInfoList,\n\t\t\t\t}),\n\t\t\t\thandleCompanyInfoList(),\n\t\t\t\thandleCompanyList(),\n\t\t\t\talert(\n\t\t\t\t\t'ログインに成功しました' +\n\t\t\t\t\t\t'\\n email:' +\n\t\t\t\t\t\tjsonResponse.savedUserData.email +\n\t\t\t\t\t\t'\\n password:' +\n\t\t\t\t\t\tjsonResponse.savedUserData.password\n\t\t\t\t),\n\t\t\t]);\n\t\t\tnavigate('/pages/home');\n\t\t} catch (err) {\n\t\t\talert('ログインに失敗しました');\n\t\t}\n\t};\n\n\tconst handleComplete = () => {\n\t\t// 完了ボタンが押されたときの処理を実装する\n\t\tconst updatedCompanyInfoList = companyInfoList.map((info) => {\n\t\t\tif (info.email === email && info.id === id) {\n\t\t\t\treturn {\n\t\t\t\t\t...info,\n\t\t\t\t\tmemo: memo,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn info;\n\t\t});\n\n\t\tupdateCompanyInfoList(updatedCompanyInfoList);\n\t\tnavigate('/pages/home');\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{company ? <h2>{company.name}のメモ</h2> : null}\n\t\t\t<div className=\"textarea-container\">\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"textarea\"\n\t\t\t\t\trows={5}\n\t\t\t\t\tvalue={memo}\n\t\t\t\t\tonChange={handleMemoChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<button onClick={handleComplete}>完了</button>\n\t\t</div>\n\t);\n}\n\nexport default CompanyInfoEdit;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}