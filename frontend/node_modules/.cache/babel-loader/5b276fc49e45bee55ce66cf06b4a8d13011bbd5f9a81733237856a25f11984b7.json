{"ast":null,"code":"import _slicedToArray from \"/Users/akiyamashuuhei/data/ShereJob/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/akiyamashuuhei/data/ShereJob/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * react-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\n\n//\n\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\nfunction isClassComponent(component) {\n  return typeof component === 'function' && function () {\n    var proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  }();\n}\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  var resolvedOptions = _objectSpread({\n    state: {},\n    // Dummy state\n    onStateChange: function onStateChange() {},\n    // noop\n    renderFallbackValue: null\n  }, options);\n\n  // Create a new table and store it in state\n  var _React$useState = React.useState(function () {\n      return {\n        current: createTable(resolvedOptions)\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    tableRef = _React$useState2[0];\n\n  // By default, manage table state here using the table's initial state\n  var _React$useState3 = React.useState(function () {\n      return tableRef.current.initialState;\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    state = _React$useState4[0],\n    setState = _React$useState4[1];\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(function (prev) {\n    return _objectSpread(_objectSpread(_objectSpread({}, prev), options), {}, {\n      state: _objectSpread(_objectSpread({}, state), options.state),\n      // Similarly, we'll maintain both our internal state and any user-provided\n      // state.\n      onStateChange: function onStateChange(updater) {\n        setState(updater);\n        options.onStateChange == null ? void 0 : options.onStateChange(updater);\n      }\n    });\n  });\n  return tableRef.current;\n}\nexport { flexRender, useReactTable };","map":{"version":3,"names":["flexRender","Comp","props","isReactComponent","React","createElement","component","isClassComponent","isExoticComponent","proto","Object","getPrototypeOf","prototype","$$typeof","includes","description","useReactTable","options","resolvedOptions","_objectSpread","state","onStateChange","renderFallbackValue","_React$useState","useState","current","createTable","_React$useState2","_slicedToArray","tableRef","_React$useState3","initialState","_React$useState4","setState","setOptions","prev","updater"],"sources":["/Users/akiyamashuuhei/data/ShereJob/frontend/node_modules/@tanstack/react-table/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAYA;;AAEO,SAASA,UAAUA,CACxBC,IAAwB,EACxBC,KAAa,EACkB;EAC/B,OAAO,CAACD,IAAI,GAAG,IAAI,GAAGE,gBAAgB,CAASF,IAAI,CAAC,gBAClDG,KAAA,CAAAC,aAAA,CAACJ,IAAI,EAAKC,KAAQ,CAAC,GAEnBD,IACD;AACH;AAEA,SAASE,gBAAgBA,CACvBG,SAAkB,EACwB;EAC1C,OACEC,gBAAgB,CAACD,SAAS,CAAC,IAC3B,OAAOA,SAAS,KAAK,UAAU,IAC/BE,iBAAiB,CAACF,SAAS,CAAC;AAEhC;AAEA,SAASC,gBAAgBA,CAACD,SAAc,EAAE;EACxC,OACE,OAAOA,SAAS,KAAK,UAAU,IAC9B,YAAM;IACL,IAAMG,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACL,SAAS,CAAC;IAC9C,OAAOG,KAAK,CAACG,SAAS,IAAIH,KAAK,CAACG,SAAS,CAACT,gBAAgB;EAC5D,CAAC,EAAG;AAER;AAEA,SAASK,iBAAiBA,CAACF,SAAc,EAAE;EACzC,OACE,OAAOA,SAAS,KAAK,QAAQ,IAC7B,OAAOA,SAAS,CAACO,QAAQ,KAAK,QAAQ,IACtC,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAACC,QAAQ,CAACR,SAAS,CAACO,QAAQ,CAACE,WAAW,CAAC;AAEhF;AAEO,SAASC,aAAaA,CAC3BC,OAA4B,EAC5B;EACA;EACA,IAAMC,eAA4C,GAAAC,aAAA;IAChDC,KAAK,EAAE,EAAE;IAAE;IACXC,aAAa,EAAE,SAAAA,cAAA,EAAM,EAAE;IAAE;IACzBC,mBAAmB,EAAE;EAAI,GACtBL,OAAA,CACJ;;EAED;EACA,IAAAM,eAAA,GAAmBnB,KAAK,CAACoB,QAAQ,CAAC;MAAA,OAAO;QACvCC,OAAO,EAAEC,WAAW,CAAQR,eAAe;MAC7C,CAAC;IAAA,CAAC,CAAC;IAAAS,gBAAA,GAAAC,cAAA,CAAAL,eAAA;IAFIM,QAAQ,GAAAF,gBAAA;;EAIf;EACA,IAAAG,gBAAA,GAA0B1B,KAAK,CAACoB,QAAQ,CAAC;MAAA,OAAMK,QAAQ,CAACJ,OAAO,CAACM,YAAY;IAAA,EAAC;IAAAC,gBAAA,GAAAJ,cAAA,CAAAE,gBAAA;IAAtEV,KAAK,GAAAY,gBAAA;IAAEC,QAAQ,GAAAD,gBAAA;;EAEtB;EACA;EACAH,QAAQ,CAACJ,OAAO,CAACS,UAAU,CAAC,UAAAC,IAAI;IAAA,OAAAhB,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAC3BgB,IAAI,GACJlB,OAAO;MACVG,KAAK,EAAAD,aAAA,CAAAA,aAAA,KACAC,KAAK,GACLH,OAAO,CAACG,KAAA,CACZ;MACD;MACA;MACAC,aAAa,EAAE,SAAAA,cAAAe,OAAO,EAAI;QACxBH,QAAQ,CAACG,OAAO,CAAC;QACjBnB,OAAO,CAACI,aAAa,IAArB,gBAAAJ,OAAO,CAACI,aAAa,CAAGe,OAAO,CAAC;MAClC;IAAA;EAAA,CACA,CAAC;EAEH,OAAOP,QAAQ,CAACJ,OAAO;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}